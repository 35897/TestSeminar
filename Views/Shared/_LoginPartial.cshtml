@using Microsoft.AspNetCore.Identity
@using TestSeminar.Models.Dbo

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> userManager


@{
    var user = await userManager.GetUserAsync(User);
}

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        var userRoles = await userManager.GetRolesAsync(user);
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @user.FirstName @user.LastName!</a>
        </li>
        switch (userRoles[0])
        {
            case Roles.Admin:
                <li class="nav-item">
                    <a class="nav-link text-dark" href="@Url.Action("ProductAdministration", "Admin")">Administracija proizvoda</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-dark" href="@Url.Action("UserAdministration", "Admin")">Administracija korisnika</a>
                </li>
                break;
            case Roles.BasicUser:
            case Roles.NewUserRole:
                break;

        }


        <li class="nav-item">
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
    }
    else
    {       
        <li class="nav-item">
            <a class="nav-link text-dark" href="@Url.Action("Registration", "User")">Registracija</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>
